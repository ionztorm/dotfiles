
# =============================================================================
# Golang üêπ
# =============================================================================

[[language]]
name = "go"
auto-format = true

[[language]]
name = "templ"
auto-format = true

# =============================================================================
# Python üêç
# =============================================================================
# 
[language-server.basedpyright]
command = "basedpyright-langserver"
args = ["--stdio"]

[language-server.ruff]
command = "ruff"
args = ["server", "--preview"] # --preview
environment = { "RUFF_TRACE" = "messages" }

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
typeCheckingMode = "standard"
diagnosticMode = "openFilesOnly"
autoImportCompletions = true

[language-server.ruff.config.settings]
lineLength = 80
logLevel = "debug"
configuration = "~/.config/ruff/ruff.toml"

[[language]]
name = "python"
language-id = "python"
roots = ["pyproject.toml", "poetry.lock", ".git", ".venv/"]
language-servers = ["ruff", "basedpyright"]
# formatter = { command = "ruff", args = ["format", "-" ] }
formatter = { command = "bash", args = ["-c", "ruff check --fix - | ruff format -"] }
file-types = ["py", "ipynb"]
comment-token = "#"
shebangs = ["python"]
auto-format = true

# [language-server.ruff.config.settings.lint]
# select = ["E", "F", "W", "B", "I", "RUF", "N", "LOG", "ERA", "W", "D", "UP", "ANN", "ASYNC", "S", "RET", "TCH", "ARG", "PTH", "DOC"]
# preview = true

# [language-server.ruff.config.settings.format]
# preview = true
# quote-style = "double"
# docstring-code-format = true
# indent-style = "space"

# [language-server.pylsp.config.pylsp]
# plugins.ruff.enabled = true
# plugins.black.enabled = false

# =============================================================================
# Frontend üåê
# =============================================================================
# 
[language-server]
emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}
biome = { command = "biome", args = ["lsp-proxy"] }
tailwindcss = { command = "tailwind-css-language-server", args = ["--stdio"] }

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = false }

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server", "emmet-ls", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server", "emmet-ls", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "css"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "typescript"
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-ls", "tailwindcss-ls" ]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

# =============================================================================
# JSON 
# =============================================================================

[language-server.vscode-json]
command = "vscode-json-language-server"
args = ["--stdio"]

[language-server.vscode-json.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[[language]]
name = "json"
formatter = { command = 'prettier', args = ["--parser", "json"] }

# =============================================================================
# Database üíΩ
# =============================================================================

[[language]]
name = "prisma"
language-servers = ["prisma-language-server"]
auto-format = true

# =============================================================================
# Markdown üéØ
# =============================================================================
 
[[language]]
name = "markdown"
text-width = 80
soft-wrap.enable = true
soft-wrap.wrap-at-text-width = true
indent = { tab-width = 4, unit = "    " }
language-servers = ["marksman"]
formatter = { command = 'prettier', args = [
  "--parser",
  "markdown",
  "--prose-wrap",
  "never", # <always|never|preserve>
] }
auto-format = true

# =============================================================================
# Other
# =============================================================================

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }
